;-----------------------------------------------------------------------------
; stackucode
; Copyright (c) 2015, Joshua Scoggins
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;-----------------------------------------------------------------------------
; Indirect library functions for loading and storing from different segments
;-----------------------------------------------------------------------------
.code
load_data:
	load ?o0 = ?i0, data
	branch load_store_done
load_microcode:
	load ?o0 = ?i0, microcode
	branch load_store_done
load_stack:
	load ?o0 = ?i0, stack
	branch load_store_done
load_procedure:
	load ?o0 = ?i0, procedure
	branch load_store_done
store_data:
	store ?i0 = ?i1, data
	branch load_store_done
store_microcode:
	store ?i0 = ?i1, microcode
	branch load_store_done
store_stack:
	store ?i0 = ?i1, stack
	branch load_store_done
store_procedure:
	store ?i0 = ?i1, procedure
	branch load_store_done
load_store_done:
	pop ?micro-pred
	return
;-----------------------------------------------------------------------------
; i0 - address
; i1 - value
; i2 - segment index
; 		where 0: data
;			  1: microcode
;			  2: stack
;			  3: procedure
;			  4 and above: panic
;-----------------------------------------------------------------------------
store_generic:
	push ?micro-pred
	eq ?micro-pred = ?i2, ?zero
	branch store_data if ?micro-pred
	eq ?micro-pred = ?i2, ?one
	branch store_microcode if ?micro-pred
	eq ?micro-pred = ?i2, ?two
	branch store_stack if ?micro-pred
	eq ?micro-pred = ?i2, ?three
	branch store_procedure if ?micro-pred
	call ucode_panic
;-----------------------------------------------------------------------------
; i0 - address
; i1 - segment index
; 		where 0: data
;			  1: microcode
;			  2: stack
;			  3: procedure
;			  4 and above: panic
;-----------------------------------------------------------------------------
load_generic:
	push ?micro-pred
	eq ?micro-pred = ?i1, ?zero
	branch load_data if ?micro-pred
	eq ?micro-pred = ?i1, ?one
	branch load_microcode if ?micro-pred
	eq ?micro-pred = ?i1, ?two
	branch load_stack if ?micro-pred
	eq ?micro-pred = ?i1, ?three
	branch load_procedure if ?micro-pred
	call ucode_panic
