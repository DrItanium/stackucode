;-----------------------------------------------------------------------------
; stackucode
; Copyright (c) 2015, Joshua Scoggins
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;-----------------------------------------------------------------------------
; main.il - microcode entry point
;-----------------------------------------------------------------------------
.code
ucode_start:
	set ?max = #xFFFF								; largest available value
	move ?min = ?zero								; smallest available value
	set ?two = #2									; hardcoded two
	set ?three = #3									; hardcoded three
	set ?memstart = stack_machine_memory_start		; stack machine memory start
	set ?memend = stack_machine_memory_end			; stack machine memory end
	set ?opvec = opcode_vector_table				; start of the opcode jump table
													;
	move ?stack-first = ?zero						; value of the top of the parameter stack
	move ?stack-second = ?zero						; value of the second from the top of the parameter stack
	move ?stack-third = ?zero						; value of the third from the top of the parameter stack
	set ?stack-rest = parameterstackbase			; pointer to the rest of the pointer stack in memory
	move ?stack-len = ?zero							; number of elements on the stack
	move ?fp = ?zero 								; The top of the frame
	set ?ip	= program_counter_start					; start of the system program counter in memory
ucode_done:											; jump to here when we are done or 
	system #0, ?one, ?one							; standard terminate simulator call
ucode_panic:										; something bad happened so
	system #1, ?one, ?one							; panic system call




.microcode
; microcode memory is a separate segment
; all of the data the microcode uses
opcode_vector_table:
	.word #0
; the memory space of the stack machine itself, start at zero and go to 0xEFFF, the remaining 4096 cells are for the stack machine
stack_machine_memory_start:
parameterstackbase:
	.word #xFFFF
.org #x0400				; 1024 entry stack
program_counter_start:

.org #xFFFF
stack_machine_memory_end:
	.word #x0000
